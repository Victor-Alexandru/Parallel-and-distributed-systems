in fiecare element din lista de thread-uri este un runnable care are primul numar al doilea numar si coada
dar din al doilea element are  numarul curent ,elmentul din coada minus 2 si elementul din coada-1

- se pornesc threadurile -> dupa se asteapta dupa ele


A bounded blocking queue backed by an array. This queue orders elements FIFO (first-in-first-out).
The head of the queue is that element that has been on the queue the longest time. The tail of the queue is that element that has
 been on the queue the shortest time. New elements are inserted at the tail of the queue, and the queue retrieval
 operations obtain elements at the head of the queue.

This is a classic "bounded buffer", in which a fixed-sized array holds elements inserted by producers and extracted by consumers.
Once created, the capacity cannot be changed. Attempts to put an element into a full queue will result in the operation blocking;
attempts to take an element from an empty queue will similarly block.

This class supports an optional fairness policy for ordering waiting producer and consumer threads.
By default, this ordering is not guaranteed. However, a queue constructed with fairness set to true grants threads access in FIFO order.
Fairness generally decreases throughput but reduces variability and avoids starvation.







The poll(long timeout, TimeUnit unit)
method retrieves and removes element from head of this queue.
If the queue is empty then it will, wait till a specified time for an element to become available.


Parameters: The method takes two parameters:

POLL
timeout (long) â€“ how long to wait before giving up, in units of unit.
unit (TimeUnit)- a TimeUnit determining how to interpret the timeout parameter.
Return Value: The method returns the head of this queue, or null if the specified waiting time elapses before an element is available.
Exception: The method throws InterruptedException if interrupted while waiting.

OFFER
The offer(E element, long timeout, TimeUnit unit) method inserts the element passed as parameter to method at the tail of this queue(ArrayBlockingQueue)
if queue is not full
. It will wait till a specified time for space to become available if the queue is full.


COMPARE_TO
Returns: This method returns the following:

0: if the value of this BigInteger is equal to that of the BigInteger object passed as a parameter.
1: if the value of this BigInteger is greater than that of the BigInteger object passed as a parameter.
-1: if the value of this BigInteger is less than that of the BigInteger object passed as a parameter.